{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-04-24T00:29:03.500723+00:00",
  "repo": "oauth-wg/draft-ietf-oauth-rfc7523bis",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 5,
      "id": "I_kwDONPDDUs6nhlxf",
      "title": "scope overreach",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/issues/5",
      "state": "OPEN",
      "author": "bc-pi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I worry that the current scope of this draft overreaches and will unnecessarily cause interop problems while also significantly impeding the goal of expedited publication. I do anticipate this to be one topic of discussion during the coming interim. So this is a heads up as much as a placeholder.\n\nHere are some areas that I believe overreach:\n- changes to authorization grant including explicit typing and audience handling \n- updates to SAML/RFC7522 (if anything, we should just say don't do SAML for client authentication and be done with it)\n- updates to RFC9101 JWT-Secured Authorization Request (JAR)\n- aud mandated to be a string value only\n\n",
      "createdAt": "2025-01-24T23:43:32Z",
      "updatedAt": "2025-02-11T00:06:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "The unifying factor in all these changes is consistently using the issuer identifier as the audience value for tokens sent to the authorization server.\n\nOne way to improve security in practice is to eliminate special cases.  We have a rare opportunity to do that right now.  This does that by always using the same audience value for the authorization server in all contexts.\n\nI hope you can choose to support that position on Monday.  At least, please seriously consider it.",
          "createdAt": "2025-01-24T23:49:09Z",
          "updatedAt": "2025-01-24T23:49:09Z"
        },
        {
          "author": "brockallen",
          "authorAssociation": "NONE",
          "body": "> aud mandated to be a string value only\n\nCould this be relaxed to say that if it's an array then it can only have a single value?",
          "createdAt": "2025-01-29T16:35:18Z",
          "updatedAt": "2025-01-29T16:35:41Z"
        },
        {
          "author": "brockallen",
          "authorAssociation": "NONE",
          "body": "> changes to authorization grant including explicit typing and audience handling\n\nHey Brian -- can you elaborate here, please? Aren't these changes fundamental to providing a mitigation? ",
          "createdAt": "2025-01-29T16:37:02Z",
          "updatedAt": "2025-01-29T16:37:32Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "> Could this be relaxed to say that if it's an array then it can only have a single value?\n\nFAPI 2 requires that it be a string and not an array.  And that seems to have been the consensus position for the other specs as well, as it simplifies the check.  Simpler code in security contexts is often better.\n",
          "createdAt": "2025-01-29T17:11:08Z",
          "updatedAt": "2025-01-29T17:11:08Z"
        },
        {
          "author": "brockallen",
          "authorAssociation": "NONE",
          "body": "> FAPI 2 requires that it be a string and not an array. \n\nAh, that makes sense.\n\n> And that seems to have been the consensus position for the other specs as well, as it simplifies the check. Simpler code in security contexts is often better.\n\nOh agreed for sure. \n\nI was just asking (perhaps naively) as a way to possibly compromise between the two stances. Thx.",
          "createdAt": "2025-01-29T18:09:03Z",
          "updatedAt": "2025-01-29T18:09:03Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > changes to authorization grant including explicit typing and audience handling\n> \n> Hey Brian -- can you elaborate here, please? Aren't these changes fundamental to providing a mitigation?\n\nNo, they are not. Changes to the authorization grant would needlessly introduce confusion and interoperability problems along with maintenance and support burden.  ",
          "createdAt": "2025-02-07T17:45:04Z",
          "updatedAt": "2025-02-07T17:45:04Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "When asked, the Stuttgart security researchers who identified the vulnerability also told us that the authorization grant is vulnerable for the same attacks.\n\nWe should fix all the vulnerabilities in a consistent manner, rather than picking and choosing which to fix and having to come back and fix more later.\n\nI'll also note that any interop problems are mitigated by @panva's suggestion to explicitly type the tokens.  You'll know that you're using rfc7523bis tokens when they're explicitly typed and you'll know that you aren't when they aren't.  Code can continue to allow the old behaviors when explicit types aren't present, if the context is such that the security risk is acceptable.",
          "createdAt": "2025-02-07T19:26:33Z",
          "updatedAt": "2025-02-07T19:26:33Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> When asked, the Stuttgart security researchers who identified the vulnerability also told us that the authorization grant is vulnerable for the same attacks.\n\nI was party to that conversation and what was described in telling us how the authorization grant is vulnerable was sufficiently contrived to the point of being vanishingly unrealistic (involving a 'local' AS doing token exchange with the client using different 'remote' AS's including one that is malicious). \n \n> I'll also note that any interop problems are mitigated by [@panva](https://github.com/panva)'s suggestion to explicitly type the tokens. You'll know that you're using rfc7523bis tokens when they're explicitly typed and you'll know that you aren't when they aren't. Code can continue to allow the old behaviors when explicit types aren't present, if the context is such that the security risk is acceptable.\n\nFilip's suggestion was for JWT client auth FWIW and explicitly typing the tokens provides some visibility and controls into the interop problems but does not make them go away.\n\nIt also can't be applied to SAML because there's no equivalent construct in a SAML assertion to the typ header in JWS/JWT.\n\nAnd it doesn't work for request objects because RFC 9101 already has a media type defined. \n",
          "createdAt": "2025-02-07T20:18:55Z",
          "updatedAt": "2025-02-07T20:18:55Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a good discussion with multiple facets.  It\u2019s what WG discussions should be.\n\nIn the JWT authorization grant case, I see our options as being to either definitively fixing the problem or having the authorization grant be a special case with different audience values than the cases we do fix.  I can see this going either way.\n\nIn the SAML case, yes, there isn\u2019t an explicit typing option.  I think that leaves a choice between fixing the SAML audiences or deprecating the SAML assertions draft entirely.  Again, I could see this going either way.\n\nIn the JAR case, all the draft does is change \u201cshould be the issuer identifier\u201d to \u201cMUST be solely the issuer identifier\u201d.  I think we should do this for consistency with the other fixes and it won\u2019t be a breaking change.  But again, the working group gets to decide.\n\nAnd of course, I think we have consensus about what to do for private_key_jwt JWTs.\n\nAs I see it, the fact we\u2019re discussing legitimate choices for some of the cases shouldn\u2019t stop us from adopting the draft to get going on fixing the things that there is consensus to fix right away.\n\n",
          "createdAt": "2025-02-07T21:43:36Z",
          "updatedAt": "2025-02-07T21:43:36Z"
        },
        {
          "author": "SECtim",
          "authorAssociation": "NONE",
          "body": "> involving a 'local' AS doing token exchange with the client using different 'remote' AS's including one that is malicious\n\nInterestingly, it seems I (as one of the Stuttgart guys) was not part of the conversation referenced here, or there may be some misunderstanding.\n\nWhat basically happens is:\n\n1. Client requests assertion from STS (for use at compromised AS, say, to exchange for an AT for some user's resources)\n2. STS uses the token endpoint published by compromised AS (i.e., an honest AS's token ep) as `aud` when creating the assertion\n3. Client uses assertion at compromised AS (note that a compromised AS may of course show different metadata to different parties)\n=> Attacker now has an assertion that is valid at the honest AS and can be exchanged for an AT for some honest user's resources; and the client used exactly one AS and performed exactly one token exchange.\n\nI do agree that with the JWT Authorization Grant, there are additional preconditions, which likely reduce the risk of this vulnerability being exploited, but would argue to mitigate even small risk if it's cheap which seems to be the case here from my point of view. That said, I am in the comfortable position of not having to weigh compatibility, implementation changes, and more or less likely-to-be-exploited security issues.\nHowever, I do want to ensure any misunderstandings are clarified.",
          "createdAt": "2025-02-07T22:43:02Z",
          "updatedAt": "2025-02-07T22:49:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Interestingly, it seems I (as one of the Stuttgart guys) was not part of the conversation referenced here, or there may be some misunderstanding.\n\nIt was a thread in (one of) the slack channels in November-ish where some discussion took place before the issue was made more public. I believe Pedram was the main Stuttgart guy in the conversation but I think you might have chimed in towards the end. \n\n> I do agree that with the JWT Authorization Grant, there are additional preconditions, which likely reduce the risk of this vulnerability being exploited, but would argue to mitigate even small risk if it's cheap which seems to be the case here from my point of view. That said, I am in the comfortable position of not having to weigh compatibility, implementation changes, and more or less likely-to-be-exploited security issues. However, I do want to ensure any misunderstandings are clarified.\n\nThat's fair. From my perspective having some responsibility for currently deployed software using this stuff, changes to SAML or JWT authorization grants are not cheap at all. \n\n",
          "createdAt": "2025-02-10T23:42:43Z",
          "updatedAt": "2025-02-10T23:42:43Z"
        },
        {
          "author": "brockallen",
          "authorAssociation": "NONE",
          "body": "FWIW, we plan to give our customers an options flag to say how strict they want to be given these recommendations.",
          "createdAt": "2025-02-11T00:06:14Z",
          "updatedAt": "2025-02-11T00:06:14Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDONPDDUs6zt1k6",
      "title": "Question about Strong Typing",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/issues/8",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I am generally in favour of strong typing - it makes it clear what the purpose of a token is and reduces risk of implementation errors or mix-ups where tokens are used inappropriately (at least, it makes it easier to detect and spot when that happens),\n \nMy understanding of the introduction of strongly typed tokens is that it is meant as a type of versioning in this case. It allows implementors to distinguish between tokens they should expect to have the audience constraints needed to mitigate the attack vs ones that may, or may not, have the correct audience constraints. Regardless, the authorization server still needs to check the constraint.\n \nI am concerned about the impact of a MUST on the eco-system of JWT token issuers that are deployed.\nFor example, Kubernetes Projected. Service Acccount Tokens (first deployed circa 2018) can be used for either workload authentication (now client-authentication+jwt in this draft) or authorisation grant flow (now client-authorization+jwt in this draft). Similarly, SPIFFE defines a JWT (JWT-SVID) that is either typed as JWT or untyped and used by workloads for authentication and authorization grant flows (first deployed circa 2016). Both systems are widely deployed and these tokens can be used with RFC 7523.\n \nThe strong typing proposed here appears to prohibit the use of tokens issued by those systems from being used in this specification, even if they strictly comply with the audience constraints needed to mitigate the attack.\nUpdating existing systems is not just a matter of adding typing to existing tokens being issued, but is a more fundamental change as a workload would now need two tokens, one of each type, depending on what the credential is being used for. It also creates complexity in code as applications now need to be aware of which token to use. In new implementations, this may be feasible. Retrofitting a large eco-system may be problematic with a very long tail.\n \nThe potential downside is that the remedies in this specification may not get deployed because of the practicalities of having to support multiple token types that are strongly typed. To put it another way, requiring strong typing may limit the deployment of the mitigation of stricter audience values.\n \nGiven that the intent of the typing is to act as a form of versioning which indicates that the audience constraint is applied, could we find language that allows an authorization server to still accept and untyped token, but still reject it if the audience constrain is not applied? There is language earlier in the specification indicating \"Furthermore, the authorization server MUST reject any such token that does not contain its own issuer identifier as the sole audience value.\", suggesting that this check needs to be performed in any event, regardless of typing.\n \nFor example, perhaps the MUST can be relaxed to a SHOULD, to allow for untyped JWTs that have the audience constraint applied? This way JWT typing does not become a barrier to deploying the audience constraint fix, but can still be used as a clear signal that an updated issuer is in fact limiting the audience appropriately.\n",
      "createdAt": "2025-04-23T20:05:36Z",
      "updatedAt": "2025-04-23T20:05:36Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDONPDDUs6CHHte",
      "title": "Use AS issuer identifier as the sole audience value",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/pull/1",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is the primary change for RFC 7523 bis",
      "createdAt": "2024-11-16T02:10:52Z",
      "updatedAt": "2024-11-20T20:00:14Z",
      "baseRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "baseRefName": "main",
      "baseRefOid": "99afb90b99dc0559c7880cb4c52d9af6f47da46c",
      "headRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "headRefName": "mbj-tighten-audience",
      "headRefOid": "eb709bcd67a770422256c2669ba9ec961272f050",
      "closedAt": "2024-11-20T20:00:14Z",
      "mergedAt": "2024-11-20T20:00:14Z",
      "mergedBy": "selfissued",
      "mergeCommit": {
        "oid": "bb89931cbb41ccd1891aba73162c9b9dc6d26def"
      },
      "comments": [
        {
          "author": "panva",
          "authorAssociation": "MEMBER",
          "body": "@aaronpk - double checking, did we discuss the audience of `urn:ietf:params:oauth:grant-type:jwt-bearer` being left the way it is or not? This PR updates the audience of both (`urn:ietf:params:oauth:grant-type:jwt-bearer`, and `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`)...\r\n\r\nI remember we did want to address the use case for the authorization grant in issuer-less environments.",
          "createdAt": "2024-11-19T12:17:15Z",
          "updatedAt": "2024-11-19T12:23:49Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "When I looked at the draft, I would have had to do fairly unnatural things to the text to not keep the audiences for the two cases aligned.  Having them different would also raise significant questions about why we're changing one and not the other and if so, whether any change is necessary at all.  I'm also not convinced that the attack isn't possible for the authorization grant case with the old audience language.",
          "createdAt": "2024-11-19T16:53:11Z",
          "updatedAt": "2024-11-19T16:53:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONPDDUs6Rgu2k",
          "commit": {
            "abbreviatedOid": "4a2218d"
          },
          "author": "RalphBragg",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T00:01:15Z",
          "updatedAt": "2024-11-18T00:04:50Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Given this is going to be a breaking change, can i recommend that we remove the support for both  a string and array with a single string in it. For simplicity (which is its own security) and compute cycles and implementation cmplexity by both AS as and RPs wouldn't it make more sense to drop the ARRAY support with a single value in it, for just supporting and requiring a single string. my 2p",
              "createdAt": "2024-11-18T00:01:15Z",
              "updatedAt": "2024-11-18T00:04:50Z"
            },
            {
              "originalPosition": 91,
              "body": "Wouldn't oidc federation be a valid mechanism in this context as well",
              "createdAt": "2024-11-18T00:04:45Z",
              "updatedAt": "2024-11-18T00:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONPDDUs6R9dF-",
          "commit": {
            "abbreviatedOid": "eb709bc"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-20T14:35:38Z",
          "updatedAt": "2024-11-20T14:35:38Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "There are still valid uses of this specification when an authorization server doesn't have an issuer identifier.",
              "createdAt": "2024-11-20T14:35:38Z",
              "updatedAt": "2024-11-20T14:35:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONPDDUs6SAZdH",
          "commit": {
            "abbreviatedOid": "af974a2"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-20T19:59:39Z",
          "updatedAt": "2024-11-20T19:59:39Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Deployments not needing the security fix need make no changes.  They can continue using RFC 7523 as is.\r\n\r\nWe should aim to be very clear in our public description of the problem when deployments do and do not require updates.",
              "createdAt": "2024-11-20T19:59:39Z",
              "updatedAt": "2024-11-20T19:59:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDONPDDUs6CI2fP",
      "title": "Explicitly type JWTs",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/pull/2",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As suggested by @panva",
      "createdAt": "2024-11-16T20:22:00Z",
      "updatedAt": "2024-11-20T20:05:56Z",
      "baseRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "baseRefName": "main",
      "baseRefOid": "bb89931cbb41ccd1891aba73162c9b9dc6d26def",
      "headRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "headRefName": "mbj-explicit-typing",
      "headRefOid": "5b124d7b4920763556aacd65287f531d56b3cf17",
      "closedAt": "2024-11-20T20:05:56Z",
      "mergedAt": "2024-11-20T20:05:56Z",
      "mergedBy": "selfissued",
      "mergeCommit": {
        "oid": "28c114cf220e1de0857add51a00b52d96ca531e3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "PR_kwDONPDDUs6CI6Ev",
      "title": "Update audience requirements in other RFCs",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/pull/3",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-16T21:20:00Z",
      "updatedAt": "2024-11-20T20:11:17Z",
      "baseRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "baseRefName": "main",
      "baseRefOid": "28c114cf220e1de0857add51a00b52d96ca531e3",
      "headRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "headRefName": "mbj-update-other-specs",
      "headRefOid": "303e3163084fc6fa0b1ee4d16f5afd9b054c8f49",
      "closedAt": "2024-11-20T20:11:16Z",
      "mergedAt": "2024-11-20T20:11:16Z",
      "mergedBy": "selfissued",
      "mergeCommit": {
        "oid": "df4c646adc45e12e75a0c35106fbd250a84dcace"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 4,
      "id": "PR_kwDONPDDUs6C3fhL",
      "title": "add option for extensions to define their own explicit jwt type",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/pull/4",
      "state": "MERGED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "See [Identity Assertion Authorization Grant](https://datatracker.ietf.org/doc/draft-parecki-oauth-identity-assertion-authz-grant/) for an example of an extension that defines its own JWT type for the authorization grant defined in the extension.",
      "createdAt": "2024-11-22T20:54:08Z",
      "updatedAt": "2024-11-26T01:23:11Z",
      "baseRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "baseRefName": "main",
      "baseRefOid": "910ddf124c5f66d9e89ce5e6593231491b28c436",
      "headRepository": "aaronpk/draft-jones-oauth-rfc7523bis",
      "headRefName": "main",
      "headRefOid": "cf723df8cab450a20543f927f797760f3ae1d13e",
      "closedAt": "2024-11-26T01:23:11Z",
      "mergedAt": "2024-11-26T01:23:11Z",
      "mergedBy": "selfissued",
      "mergeCommit": {
        "oid": "576440e17d5dabc95a063247f5404a9990b2abf3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONPDDUs6SYDue",
          "commit": {
            "abbreviatedOid": "624b61a"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-22T21:42:18Z",
          "updatedAt": "2024-11-22T21:42:18Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n\t  another more specific explicit type value defined by a specification profiling this specification.\r\n```\r\n\r\nI elaborated on what an \"extension-defined type\" is.",
              "createdAt": "2024-11-22T21:42:18Z",
              "updatedAt": "2024-11-25T23:12:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONPDDUs6SYD45",
          "commit": {
            "abbreviatedOid": "624b61a"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-22T21:42:50Z",
          "updatedAt": "2024-11-22T21:42:50Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n\t  another more specific explicit type value defined by a specification profiling this specification.\r\n```",
              "createdAt": "2024-11-22T21:42:50Z",
              "updatedAt": "2024-11-25T23:12:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONPDDUs6Sn7nj",
          "commit": {
            "abbreviatedOid": "cf723df"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-26T01:21:35Z",
          "updatedAt": "2024-11-26T01:21:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDONPDDUs6PxXSq",
      "title": "been using work email as of late",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/pull/6",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-23T17:42:51Z",
      "updatedAt": "2025-03-23T20:26:50Z",
      "baseRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "baseRefName": "main",
      "baseRefOid": "ab4b18703f95b711588b725b9c9fa47094da2fff",
      "headRepository": "bc-pi/draft-ietf-oauth-rfc7523bis",
      "headRefName": "patch-1",
      "headRefOid": "ae2bb070cd1624881ceffdafcaf631cabe54c57b",
      "closedAt": "2025-03-23T20:26:49Z",
      "mergedAt": "2025-03-23T20:26:49Z",
      "mergedBy": "selfissued",
      "mergeCommit": {
        "oid": "60edb6bcb31c51df7d4a49863e6593bdd73a8cb6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONPDDUs6hdBbN",
          "commit": {
            "abbreviatedOid": "ae2bb07"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-23T20:24:39Z",
          "updatedAt": "2025-03-23T20:24:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDONPDDUs6TXHhW",
      "title": "Rework to make updates to RFC 7523 rather than replacing it",
      "url": "https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/pull/7",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR updates the spec to only make changes to RFC 7523, rather than replacing it, as was decided at IETF 122.\r\n\r\nIt also removes the updates to RFC 9101, also per input at IETF 122.\r\n\r\nIt does not yet update the treatment of authorization grants or SAML.  That will happen in a subsequent set of changes.\r\n\r\nI wanted to get the structural changes to the spec in place first.\r\n\r\nCc: @RalphBragg @PedramHD @SECtim @ve7jtb ",
      "createdAt": "2025-04-22T01:19:46Z",
      "updatedAt": "2025-04-23T19:36:23Z",
      "baseRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "baseRefName": "main",
      "baseRefOid": "dd4c48cde8c98f3e55540effb50701e2de1b7d0b",
      "headRepository": "oauth-wg/draft-ietf-oauth-rfc7523bis",
      "headRefName": "mbj-update-rfc7523",
      "headRefOid": "b4934e19c857596e952b153342e961c5f62836fb",
      "closedAt": "2025-04-23T19:36:23Z",
      "mergedAt": "2025-04-23T19:36:23Z",
      "mergedBy": "selfissued",
      "mergeCommit": {
        "oid": "4f78ee0c37b1119e52c4ab914c41598bf9bebae3"
      },
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the link to the Audience Injection Attack paper, @bc-pi.  I've added it in https://github.com/oauth-wg/draft-ietf-oauth-rfc7523bis/pull/7/commits/b4934e19c857596e952b153342e961c5f62836fb.",
          "createdAt": "2025-04-23T19:31:12Z",
          "updatedAt": "2025-04-23T19:31:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONPDDUs6l2vzr",
          "commit": {
            "abbreviatedOid": "da8641f"
          },
          "author": "ThisIsMissEm",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I've had a read through, and whilst I'm not super familiar with this profile, the changes here make sense to me.",
          "createdAt": "2025-04-22T02:16:15Z",
          "updatedAt": "2025-04-22T02:16:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDONPDDUs6mGziZ",
          "commit": {
            "abbreviatedOid": "da8641f"
          },
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-23T10:26:03Z",
          "updatedAt": "2025-04-23T10:26:03Z",
          "comments": [
            {
              "originalPosition": 495,
              "body": "I am generally in favour of strong typing - it makes it clear what the purpose of a token is and reduces risk of implementation errors or mix-ups where tokens are used inappropriately (at least, it makes it easier to detect and spot when that happens).\r\n\r\nMy understanding of the introduction of strongly typed tokens is that it is meant as a type of versioning in this case. It allows implementors to distinguish between tokens they should expect to have the audience constraints needed to mitigate the attack vs ones that may, or may not, have the correct audience constraints. Regardless, the authorization server still needs to check the constraint.\r\n\r\nI am concerned about the impact of a MUST on the eco-system of JWT token issuers that are deployed. \r\n\r\nFor example, Kubernetes Projected. Service Acccount Tokens (first deployed circa 2018) can be used for either workload authentication (now client-authentication+jwt in this draft) or authorisation grant flow (now client-authorization+jwt in this draft). Similarly, SPIFFE defines a JWT (JWT-SVID) that is either typed as JWT or untyped and used by workloads for authentication and authorization grant flows (first deployed circa 2016). Both systems are widely deployed and these tokens can be used with RFC 7523. \r\n\r\nThe strong typing proposed here appears to prohibit the use of tokens issued by those systems from being used in this specification, even if they strictly comply with the audience constraints needed to mitigate the attack. \r\n\r\nUpdating existing systems is not just a matter of adding typing to existing tokens being issued, but is a more fundamental change as a workload would now need two tokens, one of each type, depending on what the credential is being used for. It also creates complexity in code as applications now need to be aware of which token to use. In new implementations, this may be feasible. Retrofitting a large eco-system may be problematic with a very long tail.\r\n\r\nThe potential downside is that the remedies in this specification may not get deployed because of the practicalities of having to support multiple token types that are strongly typed. To put it another way, requiring strong typing may limit the deployment of the mitigation of stricter audience values.\r\n\r\nGiven that the intent of the typing is to act as a form of versioning which indicates that the audience constraint is applied, could we find language that allows an authorization server to still accept and untyped token, but still reject it if the audience constrain is not applied? There is language earlier in the specification indicating \"Furthermore, the authorization server MUST reject any such token that does not contain its own issuer identifier as the sole audience value.\", suggesting that this check needs to be performed in any event, regardless of typing. \r\n\r\nFor example, perhaps the MUST can be relaxed to a SHOULD, to allow for untyped JWTs that have the audience constraint applied? This way JWT typing does not become a barrier to deploying the audience constraint fix, but can still be used as a clear signal that an updated issuer is in fact limiting the audience appropriately.",
              "createdAt": "2025-04-23T10:26:03Z",
              "updatedAt": "2025-04-23T19:05:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONPDDUs6mM8Db",
          "commit": {
            "abbreviatedOid": "da8641f"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Even from a structural standpoint, I still believe that it'd be more straightforward to build up from https://datatracker.ietf.org/doc/html/draft-campbell-oauth-rfc7523redux (acknowledging it's little more than an outline currently) rather than reworking.  But to the extent things are moving in that direction, I'm good with it. \r\n\r\nWe should update or add ref to https://eprint.iacr.org/2025/629 per Tim at some point too.",
          "createdAt": "2025-04-23T18:49:43Z",
          "updatedAt": "2025-04-23T18:49:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDONPDDUs6mNSoV",
          "commit": {
            "abbreviatedOid": "da8641f"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-23T19:30:15Z",
          "updatedAt": "2025-04-23T19:30:15Z",
          "comments": [
            {
              "originalPosition": 495,
              "body": "Please file an issue with your comment, @PieterKas.  Thanks!",
              "createdAt": "2025-04-23T19:30:15Z",
              "updatedAt": "2025-04-23T19:30:15Z"
            }
          ]
        }
      ]
    }
  ]
}